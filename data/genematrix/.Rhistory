usethis::use_git_config(user.name = "Thayane Batista",
user.email = "thayane.batista.ec@gmail.com")
install.packages("usethis")
usethis::use_git_config(user.name = "Thayane Batista",
user.email = "thayane.batista.ec@gmail.com")
usethis::browse_github_token()
usethis::create_github_token()
usethis::create_github_token()
usethis::create_github_token()
usethis::edit_r_environ()
# Instalacao das bibliotecas necessárias
#--- instalação do biocmanager
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
}
#--- instalação do devtools para instalação deo ggcorrplot
if(!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
#--- instalação biblioteca KEGGREST
if (!requireNamespace("KEGGREST", quietly = TRUE)) {
BiocManager::install("KEGGREST", update = F)
}
#--- instalação tidyverse
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
#--- intalação TCGA
if (!requireNamespace("TCGAbiolinks", quietly = TRUE)) {
BiocManager::install("TCGAbiolinks", update = F)
}
#--- instalação DESeq2
if (!requireNamespace("DESeq2", quietly = TRUE)) {
BiocManager::install("DESeq2", update = F)
}
#--- instalação dplyr
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#--- instalação qdapregex
if (!requireNamespace("pacman", quietly = TRUE)){
install.packages("pacman")
}
if (!requireNamespace("qdapRegex", quietly = TRUE)){
pacman::p_load_gh("trinker/qdapRegex")
install.packages("qdapRegex")
}
#--- instalação ggcorrplot
if(!requireNamespace("ggcorrplot", quietly = TRUE)){
devtools::install_github("kassambara/ggcorrplot")
install.packages("ggcorrplot")
}
#--- instalação do EnhancedVolcano
if (!requireNamespace("EnhancedVolcano", quietly = TRUE)){
BiocManager::install("EnhancedVolcano")
}
#--- instalçao ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)){
install.packages("ggplot2")
}
if (!requireNamespace("RColorBrewer", quietly = TRUE)){
install.packages("RColorBrewer")
}
#--- inicialização das libs
library(KEGGREST)
library(tidyverse)
library(DESeq2)
library(TCGAbiolinks)
library(dplyr)
library(gplots)
library(RColorBrewer)
library(ggplot2)
library(EnhancedVolcano)
library(qdapRegex)
# Instalacao das bibliotecas necessárias
#--- instalação do biocmanager
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
}
#--- instalação do devtools para instalação deo ggcorrplot
if(!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
#--- instalação biblioteca KEGGREST
if (!requireNamespace("KEGGREST", quietly = TRUE)) {
BiocManager::install("KEGGREST", update = F)
}
#--- instalação tidyverse
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
#--- intalação TCGA
if (!requireNamespace("TCGAbiolinks", quietly = TRUE)) {
BiocManager::install("TCGAbiolinks", update = F)
}
#--- instalação DESeq2
if (!requireNamespace("DESeq2", quietly = TRUE)) {
BiocManager::install("DESeq2", update = F)
}
#--- instalação dplyr
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr", update = F)
}
#--- instalação qdapregex
if (!requireNamespace("pacman", quietly = TRUE)){
install.packages("pacman", update = F)
}
if (!requireNamespace("qdapRegex", quietly = TRUE)){
pacman::p_load_gh("trinker/qdapRegex")
install.packages("qdapRegex", update = F)
}
#--- instalação ggcorrplot
if(!requireNamespace("ggcorrplot", quietly = TRUE)){
devtools::install_github("kassambara/ggcorrplot")
install.packages("ggcorrplot", update = F)
}
#--- instalação do EnhancedVolcano
if (!requireNamespace("EnhancedVolcano", quietly = TRUE)){
BiocManager::install("EnhancedVolcano", update = F)
}
#--- instalçao ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)){
install.packages("ggplot2", update = F)
}
if (!requireNamespace("RColorBrewer", quietly = TRUE)){
install.packages("RColorBrewer", update = F)
}
#--- inicialização das libs
library(KEGGREST)
library(tidyverse)
library(DESeq2)
library(TCGAbiolinks)
library(dplyr)
library(gplots)
library(RColorBrewer)
library(ggplot2)
library(EnhancedVolcano)
library(qdapRegex)
load("~/CrossPath/.RData")
library(KEGGREST)
library(tidyverse)
library(DESeq2)
library(TCGAbiolinks)
library(dplyr)
library(gplots)
library(RColorBrewer)
library(ggplot2)
library(EnhancedVolcano)
library(qdapRegex)
via <- 'hsa04110'
altura <-  1500
largura <- 1500
# --- import dos dados da via
genechoice <- via  #"hsa04110"
genechoice <- keggGet(genechoice)
genename <- genechoice[[1]][["NAME"]]
# --- transformando o nome da via
genename <- sapply(strsplit(genename, "-"), "[", 1)
# --- transformando o nome da via
genename <- sapply(strsplit(genename, " -"), "[", 1)
# --- transformando o nome da via
genename <- sapply(strsplit(genename, " - "), "[", 1)
genename <- genechoice[[1]][["NAME"]]
# --- transformando o nome da via
genename <- sapply(strsplit(genename, " - "), "[", 1)
# --- selecionando lista com os genes e seus codigos
prelista <- as.data.frame(genechoice[[1]][["GENE"]])
View(prelista)
# --- gerando a lista com os codigos dos genes da via
get_cod <- list()
for (i in 1:nrow(prelista)) {
if (i %% 2){
nome = data.frame(prelista[i,])
get_cod = rbind(get_cod, nome)
}
}
get_cod <- data.frame(get_cod)
# --- adicionando o valor 'hsa' para obter cada gene
cod_final <- list()
j <- "hsa:"
for (i in 1:nrow(get_cod)) {
cod1<- as.data.frame(get_cod[i,])
t <- data.frame(lapply(cod1, as.character), stringsAsFactors=FALSE)
k <- paste(j,t,sep = '')
k <- as.data.frame(k)
cod_final <- rbind(cod_final,k)
#cod_final contem a lista com todos os codigos para o novo acesso
}
View(cod_final)
# ---gerando uma lista com todos os possiveis nomes dos genes contidos na via
lista_all_names <- data.frame()
for (i in 1:nrow(final)) {
p <- keggGet(final[i,])
x <- as.data.frame(p[[1]][["NAME"]])
lista_all_names <- rbind(lista_all_names,x)
}
# ---gerando uma lista com todos os possiveis nomes dos genes contidos na via
lista_all_names <- data.frame()
for (i in 1:nrow(cod_final)) {
p <- keggGet(cod_final[i,])
x <- as.data.frame(p[[1]][["NAME"]])
lista_all_names <- rbind(lista_all_names,x)
}
View(lista_all_names)
# --- gerando lista com todos os possiveis nomes separados
colnames(lista_all_names)<- c("Genes")
View(lista_all_names)
# ---gerando uma lista com todos os possiveis nomes dos genes contidos na via
lista_all_names <- data.frame()
for (i in 1:nrow(cod_final)) {
p <- keggGet(cod_final[i,])
x <- as.data.frame(p[[1]][["NAME"]])
lista_all_names <- rbind(lista_all_names,x)
}
# --- gerando lista com todos os possiveis nomes separados
colnames(lista_all_names)<- c("Genes")
View(lista_all_names)
View(lista_all_names)
# --- gerando lista com todos os possiveis nomes separados
genes_via <- data.frame()
for (i in 1:nrow(lista_all_names)){
c <- ex_between(lista_all_names[i,], left = '', right = '(,|$)', fixed = FALSE)
c <- as.data.frame(c[[1]])
for (l in 1:nrow(c)){
if ( l %% 2){
v <- as.data.frame(c[l,])
genes_via <- rbind(genes_via, v)
}
}
}
View(genes_via)
colnames(genes_via)<- c("Genes")
View(genes_via)
setwd("~/CrossPath")
# --- para salvar um arquivo com a lista de genes de cada via descomente as linhas a seguir
myfile<-paste0("data/",genename, "_allgenes", ".rda",collapse = NULL)
# --- para salvar um arquivo com a lista de genes de cada via descomente as linhas a seguir
myfile<-paste0("data/",genename, "all genes", ".rda",collapse = NULL)
save(genes_via, file = myfile, compress = "xz" )
# --- para salvar um arquivo com a lista de genes de cada via descomente as linhas a seguir
myfile<-paste0("data/", genename, " all genes", ".rda",collapse = NULL)
save(genes_via, file = myfile, compress = "xz" )
# --- para salvar um arquivo com a lista de genes de cada via descomente as linhas a seguir
myfile<-paste0("data/viasgene/", genename, " all genes", ".rda",collapse = NULL)
save(genes_via, file = myfile, compress = "xz" )
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment
load('data/deseq/gene.rda')
# --- para salvar um arquivo com a lista de genes de cada via descomente as linhas a seguir
myfile<-paste0("data/viasgene/",  "all genes of ", genename, ".rda",collapse = NULL)
save(genes_via, file = myfile, compress = "xz" )
# --- carrega todas as analises que utilizaremos dos deseq's
gene = list()
gene$vsd =  as.data.frame(assay(deseq$vsd))
gene$nonNormalized =  as.data.frame(log2(1+counts(deseq$dds, normalized=F)))
gene$normalized =  as.data.frame(log2(1+counts(deseq$dds, normalized=T)))
gene$results = as.data.frame(deseq$res)
# --- para salvar o conteudo do deseq filtrado com os quase 20mil genes normalizados descomente as linhas a seguir
namedeseq <- paste0("data/deseq/", "GenesNormalizadosDESeq.rda", collapse = NULL )
save(gene, file = namedeseq, compress = "xz" )
file.exits(myfile)
file.exits(myfile)
file.exists(myfle)
file.exists(myfile)
file.exists(myfile)
file.exists(myfile) == FALSE
if (file.exists(myfile) == FALSE ) {
save(genes_via, file = myfile, compress = "xz" )
}
# --- para salvar um arquivo com a lista de genes de cada via descomente as linhas a seguir
myfile<-paste0("data/viasgene/",  "all genes of ", genename, ".rda",collapse = NULL)
if (file.exists(myfile) == FALSE ) {
save(genes_via, file = myfile, compress = "xz" )
}
# --- para salvar um arquivo com a lista de genes de cada via descomente as linhas a seguir
myfile<-paste0("data/viasgene/",  "all genes of ", genename, ".rda",collapse = NULL)
if (!file.exists(myfile)) {
save(genes_via, file = myfile, compress = "xz" )
}
# --- para salvar um arquivo com a lista de genes de cada via descomente as linhas a seguir
myfile<-paste0("data/viasgene/",  "all genes of ", genename, ".rda",collapse = NULL)
if (!file.exists(myfile)) {
save(genes_via, file = myfile, compress = "xz" )
}
# --- para salvar o conteudo do deseq filtrado com os quase 20mil genes normalizados descomente as linhas a seguir
namedeseq <- paste0("data/deseq/", "GenesNormalizadosDESeq.rda", collapse = NULL )
if (!file.exists(myfile)) {
save(gene, file = namedeseq, compress = "xz" )
}
# --- filtrando o dataframe com os genes da via selecionada
agenes <- as.character(genes_via[1:nrow(genes_via),1])
genesFiltered <- list()
genesFiltered$vsd = gene$vsd[unique(sos),]
# --- filtrando o dataframe com os genes da via selecionada
agenes <- as.character(genes_via[1:nrow(genes_via),1])
genesFiltered <- list()
genesFiltered$vsd = gene$vsd[unique(agenes),]
genesFiltered$nonNormalized = gene$nonNormalized[unique(agenes),]
genesFiltered$normalized = gene$normalized[unique(agenes),]
genesFiltered$results = gene$results[unique(agenes),]
View(genesFiltered)
View(genes_via)
genesFiltered[["vsd"]]
matrix_result <- genesFiltered$vsd
View(matrix_result)
View(matrix_result)
# --- para visualizar a matrix com os resultados filtrados
# matrix_result <- genesFiltered$vsd
# View(matrix_result)
genesFiltered %>% drop_na()
matrix_result <- genesFiltered$vsd
# --- para visualizar a matrix com os resultados filtrados
# View(matrix_result)
matrix_result %>% drop_na()
View(matrix_result)
# --- para visualizar a matrix com os resultados filtrados
# View(matrix_result)
matrix_result <- matrix_result %>% drop_na()
View(matrix_result)
# --- para visualizar a matrix com os resultados filtrados
# View(matrix_result)
matrix_result <- genesFiltered$vsd %>% drop_na()
View(matrix_result)
matrix_result <- genesFiltered
View(matrix_result)
matrix_result <- genesFiltered$vsd
View(matrix_result)
# --- para visualizar a matrix com os resultados filtrados
# View(matrix_result)
matrix_result <- genesFiltered$vsd %>% drop_na()
matrix_result <- genesFiltered$vsd %>% drop_na()
myfile2<-paste0("data/genematrix/", genename, " matrix", ".rda",collapse = NULL)
file.exists(myfile)
file.exists(namedeseq)
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment (aproximadamente 1 GB)
# load('data/deseq/gene.rda')
g <- read(myfile)
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment (aproximadamente 1 GB)
# load('data/deseq/gene.rda')
g <- rd(myfile)
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment (aproximadamente 1 GB)
# load('data/deseq/gene.rda')
g <- read_file(myfile)
file.exists(namedeseq)
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment (aproximadamente 1 GB)
# load('data/deseq/gene.rda')
g <- read_file(GenesNormalizadosDESeq.rda)
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment (aproximadamente 1 GB)
# load('data/deseq/gene.rda')
g <- read_file("GenesNormalizadosDESeq.rda")
setwd("~/CrossPath")
setwd("~/CrossPath/data/deseq/")
gene <- read(GenesNormalizadosDESeq.rda)
install.packages("read")
install.packages("read_file")
if (!requireNamespace("read_file", quietly = TRUE)){
install.packages("read_file", update = F)
}
library(read_file)
library(read)
library(readr)
setwd("~/CrossPath/data/deseq/")
gene <- readr(GenesNormalizadosDESeq.rda)
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment (aproximadamente 1 GB)
# load('data/deseq/gene.rda')
g <- read_file("GenesNormalizadosDESeq.rda")
setwd("~/CrossPath/data/deseq")
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment (aproximadamente 1 GB)
# load('data/deseq/gene.rda')
g <- read_file( file = "GenesNormalizadosDESeq.rda")
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment (aproximadamente 1 GB)
# load('data/deseq/gene.rda')
g <- read_file( file = 'GenesNormalizadosDESeq.rda')
library(readr)
# --- para rodar linha por linha descomente a linha a seguir
# --- surge como 'deseq'no environment (aproximadamente 1 GB)
# load('data/deseq/gene.rda')
g <- read_file( file = 'GenesNormalizadosDESeq.rda')
